<p>For this project, I create _lots_ of sample queries. Most of them are unused, but can be referred to when I wish to expand capacity. I start a query by building it in my sql environment (workbench, see below). Once it functions the way I need it to, I rebuild it into my python project (also below). I have two files with queries: one for building the webpages, and the other for populating the dashboard. </p>

<p>Pagebuilding queries:</p>
<p>Copied from `Sample Queries.sql` in .zip submission</p>

<pre>
--- Equivalent Queries made from python def ---


--- def grab_article ---
SELECT Post.article_ID, Post.title, concat(Users.first_name,' ',Users.last_name) AS author, Post.subtitle, Post.post_date, Post.theme, Post.page_type, Post.post_order, Post.content, Post.cover_img_link
FROM Post INNER JOIN Writes ON Post.article_ID=Writes.article_ID INNER JOIN Users ON Users.ID=Writes.author_ID
WHERE title="Welcome";

--- def grab_all_topics ---
SELECT topic_name, topic_status
FROM Topics;

--- def grab_articles_in_topic_newst_first ---
SELECT Post.title
FROM Post INNER JOIN Topic_Post ON Post.article_ID=Topic_Post.article_ID INNER JOIN Topics ON Topic_Post.topic_name=Topics.topic_name
WHERE Topics.topic_name="Project"
ORDER BY Post.post_order DESC, Post.post_date DESC;

--- def grab_articles_for_topic_oldest_first ---
SELECT Post.title
FROM Post INNER JOIN Topic_Post ON Post.article_ID=Topic_Post.article_ID INNER JOIN Topics ON Topic_Post.topic_name=Topics.topic_name
WHERE Topics.topic_name="Project"
ORDER BY Post.post_order ASC, Post.post_date ASC;

--- def grab_articles_in_tag---
SELECT Post.title, Topic_Post.topic_name
FROM Post INNER JOIN Topic_Post ON Post.article_ID=Topic_Post.article_ID INNER JOIN Tags ON Post.article_ID=Tags.article_ID
WHERE Tags.tag_name="public";

--- def grab_all_tags ---
SELECT tag_name, COUNT(*) as count
FROM Tags
GROUP BY tag_name
ORDER BY count DESC;

--- def grab_topics_in_article ---
SELECT Topics.topic_name
FROM Topics INNER JOIN Topic_Post ON Topics.topic_name=Topic_Post.topic_name INNER JOIN Post ON Topic_Post.article_ID=Post.article_ID
WHERE Post.article_ID=1;

--- def grab_authors ---
SELECT DISTINCT concat(Users.first_name, ' ', Users.last_name) AS author, ID
FROM Users INNER JOIN Writes ON Users.ID=Writes.author_ID;

--- def grab_contributors ---
SELECT DISTINCT concat(Users.first_name, ' ', Users.last_name) AS contributor, ID
FROM Users INNER JOIN Contributes ON Users.ID=Contributes.contributor;

--- def grab_author_articles ---
SELECT Post.title, Topic_Post.topic_name
FROM (Post INNER JOIN Writes ON Post.article_ID=Writes.article_ID INNER JOIN Users ON Writes.author_ID=Users.ID) INNER JOIN Topic_Post on Post.article_ID=Topic_Post.article_ID
WHERE Users.ID=1
ORDER BY topic_name;


--- def grab_contributor_articles ---
SELECT Post.title
FROM Post INNER JOIN Contributes ON Post.article_ID=Contributes.article_ID INNER JOIN Users ON Contributes.contributor=Users.ID
WHERE Users.ID=5;

--- def grab_about_author ---
SELECT *, DATE_FORMAT(date_employ, '%M %Y') as date, TIMESTAMPDIFF(DAY,date_employ,NOW()) as days_employed
FROM Users
WHERE first_name="Lucas" AND last_name="Moyer";

--- def grab_kin_article ---
SELECT Post.title, Topic_Post.topic_name as topic
FROM Post INNER JOIN Topic_Post ON Post.article_ID=Topic_Post.article_ID
WHERE  Topic_Post.topic_name = "Project" AND Post.post_order = ((SELECT post_order FROM Post WHERE title = "Project Goals" LIMIT 1) + 1) ;









SELECT post_order FROM Post WHERE title = "Public Lorem Ipsum 3" LIMIT 1;

--- def grab_subscribed_topics ---
SELECT Topics.topic_name
FROM Topics INNER JOIN Subscribes ON Topics.topic_name=Subscribes.topic_name INNER JOIN Subscriber ON Subscribes.sub_email=Subscriber.email
WHERE Subscriber.email = "basicSubscriber2@subs.org";

--- def grab_public_topics ---
SELECT topic_name
FROM Topics
WHERE topic_status="public";



-- Use function to determine premium status


--- def grab_role ---
SELECT role
FROM (SELECT email, user_role AS role
    FROM Users
        UNION
    SELECT sub_email, SubscriptionLevel(membership, sub_date) AS role
    FROM Subscribes) AS all_users
WHERE email="basicSubscriber@subs.org";





--- def grab_article_feed ---
SELECT Topics.topic_name, Topics.topic_status, Subscribes.membership, Post.article_ID, Post.title, Post.post_date
FROM     (Topics INNER JOIN Subscribes ON Topics.topic_name=Subscribes.topic_name INNER JOIN Subscriber ON Subscribes.sub_email=Subscriber.email)
    INNER JOIN
        (Post INNER JOIN Topic_Post ON Post.article_ID=Topic_Post.article_ID)
    ON Topics.topic_name=Topic_Post.topic_name
WHERE Subscriber.email = "premiumSubscriber2@subs.org" AND Subscriber.sub_status="active"
ORDER BY Post.post_date DESC;


--- def grab_theme ---
SELECT *
FROM Theme
WHERE theme_name="Dark-wide";

--- method exists ---

SELECT EXISTS(
    SELECT membership
    FROM Subscribes
    WHERE sub_email='basicSubscriber@subs.org' AND topic_name='Premium Blog'
);


-- for search bar --

--- def grab_like ---
SELECT * FROM Post
WHERE content LIKE '%Purpose%';

SELECT DISTINCT title, topic_name, SUBSTRING(content, 1, 200) AS preview
FROM Post INNER JOIN Topic_Post ON Post.article_ID=Topic_Post.article_ID
WHERE content LIKE '%Premium%';


Dashboard Queries
Copied from `dashboard.sql` in .zip submission


--- def kpi_av_day_views_in_month ---

SELECT ROUND( AVG(c.views) ,2) as av
FROM (SELECT COUNT(IP_address) as views
    FROM Stats
    WHERE YEAR(visit) ='2020' and MONTH(visit)='4'
    GROUP BY MONTH(visit), DAY(visit)) as c;


 --- def kpi_revenue_goal_month ---
 
 SELECT (SUM(trans_amount)/4500 * 100) as percent_goal
 FROM Revenue
 WHERE YEAR(trans_date)='2022' and MONTH(trans_date)='4';


--------- Count of views per site,article,topic,tag,author,contributor ---------

--- def stat_site_views ---
SELECT COUNT(IP_address) as all_views
FROM Stats;

--- def stat_site_unique_viewers ---
SELECT COUNT(DISTINCT IP_address) as unique_viewers
FROM Stats;

--- def stat_article_views ---
SELECT COUNT(IP_address) as all_views
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID
WHERE Post.title = 'Home';

--- def stat_article_unique_viewers ---
SELECT COUNT(DISTINCT IP_address) as unique_viewers
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID
WHERE Post.title = 'Home';

--- def stat_views_site_time ---
SELECT COUNT(IP_address) AS viewers, visit, YEAR(visit) as year ,MONTH(visit) as month, DAY(visit) as day
FROM Stats
GROUP BY year, month, day, hour, SECOND(visit);

--- def stat_unique_views_site_time ---
SELECT COUNT(DISTINCT IP_address) AS viewers, visit, YEAR(visit) as year ,MONTH(visit) as month, DAY(visit) as day, HOUR(visit) as hour
FROM Stats
GROUP BY year, month, day, hour, SECOND(visit);

--- def stat_views_article_time ---
SELECT COUNT(IP_address) AS viewers, visit, YEAR(visit) as year ,MONTH(visit) as month, DAY(visit) as day, HOUR(visit) as hour
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID
WHERE Post.title = 'Home'
GROUP BY year, month, day, hour, SECOND(visit);

--- def stat_unique_views_article_time ---
SELECT COUNT(DISTINCT IP_address) AS viewers, visit, YEAR(visit) as year ,MONTH(visit) as month, DAY(visit) as day, HOUR(visit) as hour
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID
WHERE Post.title = 'Home'
GROUP BY year, month, day, hour, SECOND(visit);

--- def stat_all_topic_views ---
SELECT COUNT(IP_address) as all_views, Topic_Post.topic_name
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Topic_Post ON Post.article_ID=Topic_Post.article_ID
GROUP BY Topic_Post.topic_name;



--- def stat_all_topic_views_time ---
SELECT COUNT(IP_address) as count_, Topic_Post.topic_name as cat_, YEAR(visit) as year, MONTH(visit) as month
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Topic_Post ON Post.article_ID=Topic_Post.article_ID
GROUP BY cat_, year, month;




--- def stat_topic_views ---
SELECT COUNT(IP_address) as all_views
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Topic_Post ON Post.article_ID=Topic_Post.article_ID
WHERE Topic_Post.topic_name = 'Public Blog';

SELECT COUNT(DISTINCT IP_address) as unique_views
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Topic_Post ON Post.article_ID=Topic_Post.article_ID
WHERE Topic_Post.topic_name = 'Public Blog';

--- def stat_topic_views_time ---
SELECT COUNT(IP_address) AS viewers, visit, YEAR(visit) as year ,MONTH(visit) as month, DAY(visit) as day, HOUR(visit) as hour
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Topic_Post ON Post.article_ID=Topic_Post.article_ID
WHERE Topic_Post.topic_name = 'Public Blog'
GROUP BY year, month, day, hour, SECOND(visit);

--- def stat_all_tag_views ---
SELECT COUNT(IP_address) as all_views, Tags.tag_name
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Tags ON Post.article_ID=Tags.article_ID
GROUP BY Tags.tag_name;


--- def stat_all_tag_subs_time---
SELECT COUNT(DISTINCT sub_email) as count_, Tags.tag_name as cat_, YEAR(sub_date) as year, MONTH(sub_date) as month
FROM (Subscribes INNER JOIN Topic_Post ON Subscribes.topic_name=Topic_Post.topic_name) INNER JOIN Tags ON Topic_Post.article_ID=Tags.article_ID
GROUP BY cat_, year, month;




--- def stat_tag_views ---
SELECT COUNT(IP_address) as all_views
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Tags ON Post.article_ID=Tags.article_ID
WHERE Tags.tag_name = 'demo';

--- def stat_tag_views_time ---
SELECT COUNT(IP_address) AS viewers, visit, YEAR(visit) as year ,MONTH(visit) as month, DAY(visit) as day, HOUR(visit) as hour
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Tags ON Post.article_ID=Tags.article_ID
WHERE Tags.tag_name = 'demo'
GROUP BY year, month, day, hour;

--- def stat_author_views ---
SELECT COUNT(IP_address) as all_views
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Writes ON Writes.article_ID=Post.article_ID INNER JOIN Users ON Writes.author_ID=Users.ID
WHERE Users.first_name = 'Lucas' AND Users.last_name = "Moyer";

SELECT COUNT(DISTINCT IP_address) as all_views
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Writes ON Writes.article_ID=Post.article_ID INNER JOIN Users ON Writes.author_ID=Users.ID
WHERE Users.first_name = 'Lucas' AND Users.last_name = "Moyer";

--- def stat_author_views_time ---
SELECT COUNT(IP_address) AS viewers, visit, YEAR(visit) as year ,MONTH(visit) as month, DAY(visit) as day, HOUR(visit) as hour
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Writes ON Writes.article_ID=Post.article_ID INNER JOIN Users ON Writes.author_ID=Users.ID
WHERE Users.first_name = 'Lucas' AND Users.last_name = "Moyer"
GROUP BY year, month, day, hour, SECOND(visit);


--- def stat_author_topic_views ---
SELECT COUNT(IP_address) as all_views, Topic_Post.topic_name
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Writes ON Writes.article_ID=Post.article_ID INNER JOIN Users ON Writes.author_ID=Users.ID INNER JOIN Topic_Post on Post.article_ID=Topic_Post.article_ID
WHERE Users.first_name = 'Lucas' AND Users.last_name = "Moyer"
GROUP BY topic_name;

--- def stat_author_topic_views_time ---
SELECT COUNT(IP_address) AS viewers, visit, YEAR(visit) as year ,MONTH(visit) as month, DAY(visit) as day, HOUR(visit) as hour
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Writes ON Writes.article_ID=Post.article_ID INNER JOIN Users ON Writes.author_ID=Users.ID INNER JOIN Topic_Post on Post.article_ID=Topic_Post.article_ID
WHERE Users.first_name = 'Lucas' AND Users.last_name = "Moyer" AND Topic_Post.topic_name='Project'
GROUP BY year, month, day, hour;

--- def stat_all_author_posts ---
SELECT COUNT(article_ID) AS post, CONCAT(first_name,' ',last_name) as author
FROM Writes INNER JOIN Users ON Writes.author_id=Users.ID
GROUP BY author;







--- def stat_all_author_posts_revenue ---
-- EXAMPLE --

--- What are the total posts per author and what is that authors revenue contribution?
--- Authors contribution defined as: the sum of reveue associated with subscribers who subscribe to topics to which the author also contributes


SELECT post,revenue, post_count.author, post_count.avatar_link
FROM
(SELECT COUNT(article_ID) AS post, CONCAT(first_name,' ',last_name) as author, Users.avatar_link
FROM Writes INNER JOIN Users ON Writes.author_id=Users.ID
GROUP BY author ) as post_count
INNER JOIN
(SELECT SUM(trans_amount) AS revenue, author
FROM (SELECT topic_name, CONCAT(Users.first_name,' ',Users.last_name) as author
        FROM Users INNER JOIN Writes ON Users.ID=Writes.author_ID INNER JOIN Topic_Post ON Writes.article_ID=Topic_Post.article_ID
        GROUP BY author, topic_name) AS U
    INNER JOIN Subscribes ON U.topic_name=Subscribes.topic_name INNER JOIN Revenue ON Subscribes.sub_email=Revenue.sub_email
GROUP BY author) as author_revenue
ON post_count.author=author_revenue.author;

--- Equivalent to below view ---

SELECT * FROM author_stats;



--- def stat_contributor_views ---
SELECT COUNT(IP_address) as all_views
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Contributes ON Contributes.article_ID=Post.article_ID INNER JOIN Users ON Contributes.contributor=Users.ID
WHERE Users.first_name = 'Lucas' AND Users.last_name = "Moyer";

--- def stat_contributor_views_time ---
SELECT COUNT(IP_address) AS viewers, visit, YEAR(visit) as year ,MONTH(visit) as month, DAY(visit) as day, HOUR(visit) as hour
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Contributes ON Contributes.article_ID=Post.article_ID INNER JOIN Users ON Contributes.contributor=Users.ID
WHERE Users.first_name = 'Lucas' AND Users.last_name = "Moyer"
GROUP BY year, month, day, hour, SECOND(visit);

--- def stat_contributor_topic_views ---
SELECT COUNT(IP_address) as all_views, Topic_Post.topic_name
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Contributes ON Contributes.article_ID=Post.article_ID INNER JOIN Users ON Contributes.contributor=Users.ID INNER JOIN Topic_Post on Post.article_ID=Topic_Post.article_ID
WHERE Users.first_name = 'Lucas' AND Users.last_name = "Moyer"
GROUP BY topic_name;

--- def stat_contributor_topic_views_time ---
SELECT COUNT(IP_address) AS viewers, visit, YEAR(visit) as year ,MONTH(visit) as month, DAY(visit) as day, HOUR(visit) as hour
FROM Stats INNER JOIN Post on Stats.article_ID=Post.article_ID INNER JOIN Contributes ON Contributes.article_ID=Post.article_ID INNER JOIN Users ON Contributes.contributor=Users.ID INNER JOIN Topic_Post on Post.article_ID=Topic_Post.article_ID
WHERE Users.first_name = 'Lucas' AND Users.last_name = "Moyer" AND Topic_Post.topic_name='Project'
GROUP BY year, month, day, hour;






--------- Count of subscriptions per site,article,topic,author,contributor ---------



--- def stat_site_subs ---
SELECT COUNT(sub_email) AS count_subs
FROM Subscribes;

--- def stat_site_subs_time ---
SELECT COUNT(sub_email) AS count_subs, sub_date, YEAR(sub_date) as year, MONTH(sub_date) as month, DAY(sub_date) AS day
FROM Subscribes
GROUP BY year, month;

--- def stat_all_topic_subs ---
SELECT COUNT(Subscribes.sub_email) AS count_subs, Subscribes.topic_name
FROM Subscribes INNER JOIN Topics ON Subscribes.topic_name=Topics.topic_name
GROUP BY Subscribes.topic_name;


--- def stat_all_topic_subs_time ---
SELECT COUNT(Subscribes.sub_email) AS count_subs, Subscribes.topic_name, YEAR(sub_date) as year, MONTH(sub_date) as month
FROM Subscribes INNER JOIN Topics ON Subscribes.topic_name=Topics.topic_name
WHERE YEAR(sub_date) = 2020 and MONTH(sub_date) = 4
GROUP BY Subscribes.topic_name, year, month;


--- def stat_topic_subs
SELECT COUNT(sub_email) AS count_subs
FROM Subscribes
WHERE topic_name='Premium Blog';

--- def stat_membership_subs ---
SELECT COUNT(sub_email) AS count_subs, membership
FROM Subscribes
GROUP BY membership;

--- def stat_all_author_subs ---
SELECT COUNT(author) AS count_subs, author
FROM (SELECT topic_name, CONCAT(Users.first_name,' ',Users.last_name) as author
        FROM Users INNER JOIN Writes ON Users.ID=Writes.author_ID INNER JOIN Topic_Post ON Writes.article_ID=Topic_Post.article_ID
        GROUP BY author, topic_name) AS U
    INNER JOIN Subscribes ON U.topic_name=Subscribes.topic_name
GROUP BY author;


--- def stat_all_author_subs_time ---
SELECT COUNT(author) AS viewers, author, YEAR(sub_date) as year, MONTH(sub_date) as month, DAY(sub_date) as day
FROM (SELECT topic_name, CONCAT(Users.first_name,' ',Users.last_name) as author
        FROM Users INNER JOIN Writes ON Users.ID=Writes.author_ID INNER JOIN Topic_Post ON Writes.article_ID=Topic_Post.article_ID
        GROUP BY author, topic_name) AS U
    INNER JOIN Subscribes ON U.topic_name=Subscribes.topic_name
GROUP BY author;





--- def stat_author_subs ---
SELECT COUNT(author) AS count_subs, author
FROM (SELECT topic_name, CONCAT(Users.first_name,' ',Users.last_name) as author
        FROM Users INNER JOIN Writes ON Users.ID=Writes.author_ID INNER JOIN Topic_Post ON Writes.article_ID=Topic_Post.article_ID
        GROUP BY author, topic_name) AS U
    INNER JOIN Subscribes ON U.topic_name=Subscribes.topic_name
WHERE author='Lucas Moyer';



--- def stat_author_subs_time ---
SELECT COUNT(sub_email) AS viewers, author, YEAR(sub_date) as year, MONTH(sub_date) as month, DAY(sub_date) as day
FROM (SELECT topic_name, CONCAT(Users.first_name,' ',Users.last_name) as author
        FROM Users INNER JOIN Writes ON Users.ID=Writes.author_ID INNER JOIN Topic_Post ON Writes.article_ID=Topic_Post.article_ID
        GROUP BY author, topic_name) AS U
    INNER JOIN Subscribes ON U.topic_name=Subscribes.topic_name
WHERE author='Lucas Moyer'
GROUP BY year, month, day;




--- def stat_all_contributor_subs ---
SELECT COUNT(author) AS count_subs, author
FROM (SELECT topic_name, CONCAT(Users.first_name,' ',Users.last_name) as author
        FROM Users INNER JOIN Contributes ON Users.ID=Contributes.contributor INNER JOIN Topic_Post ON Contributes.article_ID=Topic_Post.article_ID
        GROUP BY author, topic_name) AS U
    INNER JOIN Subscribes ON U.topic_name=Subscribes.topic_name
GROUP BY author;

--- def stat_contributor_subs ---
SELECT COUNT(author) AS count_subs, author
FROM (SELECT topic_name, CONCAT(Users.first_name,' ',Users.last_name) as author
        FROM Users INNER JOIN Contributes ON Users.ID=Contributes.contributor INNER JOIN Topic_Post ON Contributes.article_ID=Topic_Post.article_ID
        GROUP BY author, topic_name) AS U
    INNER JOIN Subscribes ON U.topic_name=Subscribes.topic_name
WHERE author = 'Lucas Moyer';







--------- SUM of revenue per site,article,topic,author,contributor ---------




--- def stat_site_revenue ---
SELECT SUM(trans_amount)
FROM Revenue;

--- def stat_all_topics_revenue ---
SELECT SUM(trans_amount), Topics.topic_name
FROM Revenue INNER JOIN Subscribes ON Revenue.sub_email=Subscribes.sub_email INNER JOIN Topics ON Subscribes.topic_name=Topics.topic_name
GROUP BY Topics.topic_name;

--- def stat_topic_revenue ---
SELECT SUM(trans_amount), Topics.topic_name
FROM Revenue INNER JOIN Subscribes ON Revenue.sub_email=Subscribes.sub_email INNER JOIN Topics ON Subscribes.topic_name=Topics.topic_name
WHERE Topics.topic_name='Project';

--- def stat_author_revenue ---
SELECT SUM(trans_amount) AS revenue, author
FROM (SELECT topic_name, CONCAT(Users.first_name,' ',Users.last_name) as author
        FROM Users INNER JOIN Writes ON Users.ID=Writes.author_ID INNER JOIN Topic_Post ON Writes.article_ID=Topic_Post.article_ID
        GROUP BY author, topic_name) AS U
    INNER JOIN Subscribes ON U.topic_name=Subscribes.topic_name INNER JOIN Revenue ON Subscribes.sub_email=Revenue.sub_email
GROUP BY author;
</pre>
